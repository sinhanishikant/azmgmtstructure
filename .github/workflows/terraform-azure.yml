name: 'Terraform Management Groups'

on:
  workflow_dispatch:
    inputs:
      stageToRun:
        description: 'Select Stage to Run'
        required: true
        default: 'DeployModules'
        type: choice
        options:
          - DeployModules
          - DestroyModules
      jobToRun:
        description: 'Select Module to Deploy'
        required: true
        default: 'DeployManagementGroups'
        type: choice
        options:
          - DeployManagementGroups
          - DestroyManagementGroups

env:
  terraformVersion: '1.5.7'

permissions:
  id-token: write
  contents: read

jobs:
  deploy-managementgroups:
    if: ${{ github.event.inputs.stageToRun == 'DeployModules' && github.event.inputs.jobToRun == 'DeployManagementGroups' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        
     # - name: Remove local tfstate files
     #   run: |
     #     rm -f terraform.tfstate terraform.tfstate.backup
          
      - name: Terraform Init
        run: |
          cd modules/management-groups
          terraform init 

     # - name: Terraform Plan
     #   run: |
     #     cd modules/management-groups
     #     terraform plan -out=tfplan
        
      - name: Terraform Apply
        if: ${{ success() }}
        run: |
          cd modules/management-groups
          terraform apply -auto-approve

  destroy-managementgroups:
      if: ${{ github.event.inputs.stageToRun == 'DestroyModules' && github.event.inputs.jobToRun == 'DestroyManagementGroups' }}
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd modules/management-groups
          terraform init
          
      - name: Terraform Destroy
        run: |
          cd modules/management-groups
          terraform destroy -auto-approve
